/*

	makefits.c

	born 020626

	author jake

	version 021016

*/

#include <jni.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include "fitsio.h"

#define MAX_LINE_LENGTH 50
#define MAX_KEYWORD_LENGTH 12
#define MAX_DESC_LENGTH 80	
#define DEBUG

/*
int fitscopy ( char *infile, char *outfile );
int appendheader ( char *outfile, char *infile );
int addkey(char *outfile, char *keyword, char *keyvalue);
int read_ini ( char *inifilename, char *fitsfilename );
*/

int main ( int argc, char *argv[] )
{
	struct tm *currenttime;
	time_t caltime;
	char filename[30]="\0", fileorig[17]="\0", tempfilename[30]="\0", temp[FLEN_COMMENT]="\0";
        FILE *fp;
        short int naxis, charint, i;

	#ifdef DEBUG
		#if defined(__linux__)
			printf("Running on a Linux Machine.\n");
		#elif defined(_WIN32)
			printf("Running on a Windows Machine.\n");
		#elif defined(__unix__) && !defined(__linux__)
			printf("Running on a Unix Machine.\n");
		#else
			//#error unrecognised machine
			printf("Don't know what machine you are running.\nUse caution and please contact Jake.\n");
		#endif
	#endif


	if (argc != 3)
	{
		printf("\nConverts IMG into FITS file and adds select keywords from INI file.\n");
		printf("Usage:  makefits inputdatafile inputinifile\n");
		printf("\n");
		printf("Examples:\n");
		printf("\n");
		printf("makefits in.dat header.ini\n");
		printf("\n");
	//	printf("Note that it may be necessary to enclose the input data file name\n");
	//	printf("in single quote characters on the Unix command line.\n\n");
		return(0);
	}	

	caltime = time ( NULL );
	currenttime =  gmtime( &caltime );

/*	S = Spacecraft (a,b,d) (d is for "development", or anything
		that is not associated with one or the other s/c);
	T = a digit representing telescope: 1=EUVI, 2=COR1, 3=COR2,
		4=HI1, 5=HI2, 6=GT, 0=generic "development";
	L = a digit representing number of images used to create
		this image, 0 if > 9;
*/

	sprintf (filename, "cxx_%04i%02i%02i_%02i%02i%02i.fts",
		(*currenttime).tm_year+1900,
		(*currenttime).tm_mon+1,
		(*currenttime).tm_mday,
		(*currenttime).tm_hour,
		(*currenttime).tm_min,
		(*currenttime).tm_sec);


	#ifdef DEBUG
		printf ("Version : 021016\n");
	#endif

	printf ("Output filename: %s\n",filename);

	strcpy (tempfilename, argv[1]);
	strcat (tempfilename, "[ul");

	if (( fp = fopen ( argv[1], "rb" )) == NULL ) {
		printf ("Cannot open file");
		exit(1);
	}
	fread ( &naxis, 1, 2, fp );		//read first 2 bytes from img file

	#if !defined(_WIN32) && !defined (__linux__)
        	ffswap2 ( &naxis, 1 );		//only byteswap if not on Windows or Linux machine
	#endif
	sprintf(temp, "%u", naxis);
	strcat(tempfilename, temp);
	strcat(tempfilename, ",");

        fread ( &naxis, 1, 2, fp );		//read second 2 bytes from img file
	#if !defined(_WIN32) && !defined (__linux__)
		ffswap2 ( &naxis, 1 );		//only byteswap if not on Windows or Linux machine
	#endif
	sprintf(temp,"%u", naxis);
	strcat(tempfilename, temp);
	strcat (tempfilename, ":4]");
        fclose (fp);

	#ifdef DEBUG
		printf ("%s\n\n", tempfilename);
	#endif

	fitscopy ( tempfilename, filename );
	addkey ( filename, "FILENAME", filename );
	addkey ( filename, "FILEORIG", "ccd42_5_23_l.img" );	//argv[1] );
	sprintf (temp, "%04i-%02i-%02it%02i:%02i:%02i.???",
		(*currenttime).tm_year+1900,
		(*currenttime).tm_mon+1,
		(*currenttime).tm_mday,
		(*currenttime).tm_hour,
		(*currenttime).tm_min,
		(*currenttime).tm_sec);
	addkey ( filename, "DATE-OBS", temp );
	addkey ( filename, "DATE", temp );
	addkey ( filename, "HISTORY", "Converted from IMG to FITS using Jake's makefits." );
	sprintf (temp, "Compiled from %s on %s %s.", __FILE__, __TIME__, __DATE__);
	addkey ( filename, "COMMENT", temp );
	addkey ( filename, "ORIGIN", "NRL");

	read_ini ( argv[2], filename );		//add select keywords from ini file

	if (( fp = fopen ( argv[1], "rb" )) == NULL ) {
                printf ("Cannot open file");
                exit(1);
        }

	if ( fseek ( fp, (2*2560*2048)+4, SEEK_SET)) {
		printf ("Failed Seek");
	}
	else 
	{	
		while ( !feof(fp) ) {
			strncpy(temp, "", FLEN_COMMENT);
			fgets ( temp, FLEN_COMMENT, fp );
			for (i=0; i<FLEN_COMMENT; i++) {
				if ( !isprint(temp[i])) 
					temp[i]='\0';
			}
			addkey ( filename, "COMMENT", temp );
			#ifdef DEBUG	
				printf ( "Adding COMMENT from bottom of IMG file:\n" );
				printf ( "%s\n", temp );		
			#endif
		}
	}
	
	fclose(fp);



	return(0);
}


